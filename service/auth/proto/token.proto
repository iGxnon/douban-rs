syntax = "proto3";

package douban.auth.token;

enum TokenKind {
  private = 0; // private (HS256)
  public = 1;  // public (RS256)
}

message Token {
  string value = 1;
  TokenKind kind = 2;
}

message GenerateTokenReq {
  string id = 1;  // token id | user id | whom the token for | sub
  string sid = 2;  // service id | client id | audience | aud
  TokenKind kind = 3;  // token kind
  optional string secret = 4;  // client secret (OPTIONAL) enable for higher security signature, used to encrypt jwt
}

message GenerateTokenResp {
  repeated Token token = 3;
}

message AuthTokenReq {
  string id = 1;  // token id | user id | whom the token for
  optional string secret = 2;  // client secret (OPTIONAL) enable for higher security signature, used to decrypt jwt
  Token token = 3;
}

message AuthTokenResp {}

message ParseTokenReq {
  Token token = 1;
  optional string secret = 2;  // client secret (OPTIONAL) enable for higher security signature, used to encrypt jwt
}

message ParseTokenResp {
  string payload = 3;  // only serialize the payload field
}

service TokenSrv {
  rpc GenerateToken(GenerateTokenReq) returns (GenerateTokenResp) {}
  rpc AuthToken(AuthTokenReq) returns (AuthTokenResp) {}
  rpc ParseToken(ParseTokenReq) returns (ParseTokenResp) {}
}